# Configuration file for the GitHub repository scraper

# Base URL of the GitHub API
API_BASE_URL: https://api.github.com

# List of needed user details to be retrieved from the GitHub API when scraping users
USERS_COLS:
  - login  # GitHub username
  - url    # URL of the user's GitHub profile

# List of needed repository details
REPO_COLS:
  - owner                   # Repository owner
  - repo_name               # Repository name
  - repo_html_url           # URL of the repository
  - language                # Programming language of the repository
  - topics                  # Topics of the repository
  - repo_description        # Description of the repository
  - open_issues_count       # Number of open issues
  - forks_count             # Number of forks
  - stargazers_count        # Number of stargazers
  - last_repo_commit_date   # Date of the last commit
  - license                 # License of the repository

REPOS_DETAILS:
  - owner
  - repo_name
  - filenames
  - tags
  - dependencies
  - issues
  - pull_requests
  - commits_count
  - ci_cd_tool

# List of needed profile details
PROFILE_KEYS:
  - login         # GitHub username
  - name          # User name
  - location      # User location
  - email         # User email
  - bio           # User bio
  - public_repos  # Number of public repositories
  - public_gists  # Number of public gists
  - followers     # Number of followers
  - following     # Number of users followed
  - created_at    # Date of account creation
  - updated_at    # Date of last update

# Define language keywords related to databases
DB_LANGUAGES:
  - SQL
  - TSQL
  - PLSQL
  - PL/pgSQL
  - MongoDB
  - Cypher
  - CQL
  - NoSQL
  - DynamoDB
  - Neo4j

# List of database to retrieve from the GitHub API when scraping repositories
DB_FILES_PATTERNS:
  - req[a-z]?.txt
  - schema\.sql
  - pom\.xml
  - Pipfile
  - database\.(yml|yaml)?
  - \.env
  - \.env\.example
  - database\.config
  - config\.yml
  - pyproject\.toml
  - package\.json
  - docker-compose\.(text.|prod.|dev.|local.)?(yml|yaml)?
  - Gemfile
  - go\.mod
  - build\.gradle
  - settings\.py
  - init\.sql
  - db\.js
  - database\.js
  - db_config\.php
  - database\.ini
  - db\.properties
  - hibernate\.cfg\.xml
  - connection\.js
  - knexfile\.js
  - application\.properties
  - alembic\.ini
  - flyway\.conf
  - v1__init\.sql
  - pg_hba\.conf
  - postgresql\.conf
  - my\.ini
  - my\.cnf
  - postgresql\.conf
  - \.gitignore
  - database.ini
  - database.properties

# List of documentation to retrieve from the GitHub API when scraping repositories
DOC_FILES_PATTERNS:
  - doc[a-z]?
  - readme\.(md|txt|rst)?
  - contributing\.(md|txt|rst)?
  - code_of_conduct\.(md|txt|rst)?
  - changelog\.(md|txt|rst)?
  - install\.(md|txt|rst)?
  - license\.(txt|md)?
  - security\.(md|txt|rst)?
  - support\.(md|txt|rst)?
  - governance\.(md|txt|rst)?
  - faq\.(md|txt|rst)?
  - styleguide\.(md|txt|rst)?
  - todo\.(md|txt|rst)?
  - authors\.(txt|md)?
  - credits\.(md|txt|rst)?
  - dco\.(md|txt|rst)?
  - pull_request_template\.(md|txt|rst)?

API_FILES_PATTERNS:
  - swagger\.(json|yaml|yml)?
  - openapi\.(json|yaml|yml)?
  - postman_collection\.json
  - api-spec\.(json|yaml|yml)?
  - api-docs\.(json|yaml|yml)?
  - api-[Dd]ocs\.(json|yaml|yml)?
  - blueprint\.(json|yaml|yml|apib)?
  - raml\.(json|yaml|yml|raml)?
  - graphql\.(gql|graphql)?
  - asyncapi\.(json|yaml|yml)?

API_DIRS_PATTERNS:
  - (?i)api
  - (?i)docs?.?api
  - (?i)swagger
  - (?i)openapi
  - (?i)postman
  - (?i)spec(s?)\.?(api)?
  - (?i)blueprint
  - (?i)raml
  - (?i)graphql
  - (?i)asyncapi

# Ignore directories containing static assets, build artifacts and third-party code
UN_IMPORTANT_DIRS_PATTERNS:
  # Assests and Cache Directories
  - img[a-z]?
  - fig[a-z]?
  - asset[a-z]?
  - storage[a-z]?
  - cache[a-z]?
  - tmp[a-z]?
  - temp[a-z]?
  - draft[a-z]?
  # Project outputs
  - out[a-z]?
  # Log Directories
  - log[a-z]?
  - error_log[a-z]?
  - session[a-z]?
  # Python and Build Artifacts
  - __pycache__
  - bin[a-z]?
  - build[a-z]?
  - dist[a-z]?
  # Dependency and Third-Party Directories
  - \.git
  - 3rdparty
  - vendors?
  - darwin
  - lib
  - node
  - node_modules
  # Testing Directories
  - test[a-z]?
  - test-[a-z]?
  - test_[a-z]?

# List of CI/CD files to retrieve from the GitHub API when scraping repositories
CI_CD_PATTERNS:
  .github/workflows/: GitHub Actions
  bitbucket-pipelines.(yml|yaml): Bitbucket
  (?:\.|^)gitlab-ci.(yml|yaml): GitLab CI 
  circle(?:ci)?.(yml|yaml): CircleCI
  (?:jenkinsfile(?:.groovy)?:|jenkins(?:\.)?(yml|yaml)): Jenkins
  ansible.cfg|playbooks/: Ansible
  (?:\.|^)buildspec.(yml|yaml)|template.(yml|yaml)|cdk/: AWS
  (?:model_registry|mlruns)/|mlflow.(yml|yaml): MLFlow
  (?:\.|^)travis.(yml|yaml): Travis CI
  (?:\.|^)azure-pipelines.(yml|yaml): Azure 
  (?:\.|^)cloudbuild.(yml|yaml): GCB 
  (?:\.|^)dvc.(yml|yaml|lock)|metrics.(yml|yaml)|\.dvc/config: DVC
  appveyor.(yml|yaml): AppVeyor
  bamboo-specs/: Bamboo
  .teamcity/: TeamCity
  codeship.(yml|yaml): Codeship 
  codeclimate.(yml|yaml): CodeClimate 
  (?:argo-cd/|application.(yml|yaml)): Argo CD 
  openshift-pipelines/: OpenShift
  master\.cfg: Buildbot
  go\.cd/: GoCD
  cruise-config\.xml: GoCD
  semaphore.(yml|yaml): Semaphore
  (?:spinnaker.(yml|yaml)|spinnaker/): Spinnaker
  harness.(yml|yaml): Harness
  deploybot.(yml|yaml): DeployBot
  katalon.(yml|yaml): Katalon
  webapp.(yml|yaml): WebApp
  cfengine/: CFEngine
  rudder/: Rudder
  rundeck/: RunDeck
  juju/: Juju
  pom\.xml: Maven
  Dockerfile|docker-compose.(yml|yaml): Docker 
  build\.xml: Apache ANT
  gruntfile\.js: Grunt
  packer\.json: Packer
  codemagic.(yml|yaml): Codemagic
  buddy.(yml|yaml): Buddy
  deployhq.(yml|yaml): DeployHQ

# HTTP Session configuration
RETRY_FACTOR: 0.2
RETRY_NUM: 5

# Set default encoding for reading and writing files
DEFAULT_ENCODING: utf-8

# Directories to create and be used
DATA_DIR: data  # Directory for storing scraped data
LOG_DIR: logs  # Directory for storing log files

# File paths for the output of the user and repository scrapers
USERS_FILENAME:  egy_users.csv                    # File path for user data
EGY_USERS_REPOS_FILENAME: egy_users_repos.csv     # File path for repository data of Egyptian users
NON_EGY_REPOS_FILENAME: non_egy_repos.csv         # File path for repository data of non-Egyptian users
EGY_CONTRIBS_FILENAME: egy_contribs.csv           # File path for contributor data
DB_KEYWORDS_FILENAME: database_keywords.json      # File path for database_keywords.json

