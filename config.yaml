# Configuration file for the GitHub repository scraper

# Base URL of the GitHub API
API_BASE_URL: https://api.github.com

# List of needed user details to be retrieved from the GitHub API when scraping users
USERS_COLS:
  - login  # GitHub username
  - url    # URL of the user's GitHub profile

# List of needed repository details
REPO_COLS:
  - owner                   # Repository owner
  - repo_name               # Repository name
  - repo_html_url           # URL of the repository
  - language                # Programming language of the repository
  - topics                  # Topics of the repository
  - repo_description        # Description of the repository
  - open_issues_count       # Number of open issues
  - forks_count             # Number of forks
  - stargazers_count        # Number of stargazers
  - last_repo_commit_date   # Date of the last commit
  - license                 # License of the repository

REPOS_DETAILS:
  - owner
  - repo_name
  - filenames
  - tags
  - dependencies
  - issues
  - pull_requests
  - commits_count
  - ci_cd_tool

# List of needed profile details
PROFILE_KEYS:
  - login         # GitHub username
  - name          # User name
  - location      # User location
  - email         # User email
  - bio           # User bio
  - public_repos  # Number of public repositories
  - public_gists  # Number of public gists
  - followers     # Number of followers
  - following     # Number of users followed
  - created_at    # Date of account creation
  - updated_at    # Date of last update

# Define language keywords related to databases
DB_LANGUAGES:
  - SQL
  - TSQL
  - PLSQL
  - PL/pgSQL
  - MongoDB
  - Cypher
  - CQL
  - NoSQL
  - DynamoDB
  - Neo4j


# List of database to retrieve from the GitHub API when scraping repositories
DB_FILES:
  - requirements.txt
  - requirement.txt
  - schema.sql
  - pom.xml
  - Pipfile
  - database.yml
  - .env
  - .env.example
  - database.config
  - config.yml
  - pyproject.toml
  - package.json
  - docker-compose.yml
  - Gemfile
  - go.mod
  - build.gradle
  - settings.py
  - init.sql
  - db.js
  - database.js
  - db_config.php
  - database.ini
  - db.properties
  - hibernate.cfg.xml
  - connection.js
  - knexfile.js
  - application.properties
  - alembic.ini
  - flyway.conf
  - v1__init.sql
  - pg_hba.conf
  - postgresql.conf
  - my.ini
  - my.cnf
  - postgresql.conf
  - .gitignore

# List of documentation to retrieve from the GitHub API when scraping repositories
DOC_FILES:
  - doc
  - docs
  - documentation
  - documentations
  - readme
  - readme.md
  - contributing.md
  - code_of_conduct.md
  - changelog.md
  - install.md
  - license
  - api.md
  - security.md
  - support.md
  - governance.md
  - faq.md
  - styleguide.md
  - todo.md
  - authors
  - credits.md
  - dco.md
  - changelog
  - pull_request_template.md

# Ignore directories containing static assets, build artifacts and third-party code
UN_IMPORTANT_DIRS:
  # Assests and Cache Directories
  - images
  - imgs
  - img
  - figures
  - figure
  - figs
  - assets
  - asset
  - storage
  - cache
  - caches
  - contents
  - content
  # Temporary Directories
  - tmp
  - temp
  - draft
  - drafts
  # Project outputs
  - output
  - outputs
  - out
  - outs
  # Log Directories
  - log
  - logs
  - error_logs
  - session
  - sessions
  # Python and Build Artifacts
  - __pycache__
  - bin
  - build
  - builds
  - buildfiles
  - dist
  - dists
  - distfiles
  - distdir
  # Dependency and Third-Party Directories
  - .git
  - 3rdparty
  - vendor
  - vendors
  - darwin
  - lib
  - node
  - node_modules
  # Testing Directories
  - testing
  - tests
  - test
  - test-results
  - test-result
  - testresults
  - testresult
  - test-suite
  - test-suites
  - testsuite
  - testsuites

# List of CI/CD files to retrieve from the GitHub API when scraping repositories
CI_CD:
  .github/workflows/: GitHub Actions
  bitbucket-pipelines.yml: Bitbucket

  gitlab-ci.yml: GitLab CI
  .gitlab-ci.yml: GitLab CI  
  .gitlab-ci.yaml: GitLab CI  
  gitlab-ci/: GitLab CI

  circleci.yml: CircleCI
  circle.yml: CircleCI
  .circleci/config.yml: CircleCI  
  .circleci/config.yaml: CircleCI  
  .circleci/: CircleCI  

  jenkins.yml: Jenkins  
  jenkins.yaml: Jenkins  
  jenkinsfile: Jenkins  
  jenkinsfile.groovy: Jenkins  
  jenkins/: Jenkins 

  ansible.cfg: Ansible
  playbooks/: Ansible

  travis.yml: Travis CI  
  .travis.yml: Travis CI  
  .travis.yaml: Travis CI  

  azure-pipelines.yml: Azure
  cloudbuild.yaml: GCB 
  cloudbuild.yml: GCB
  buildspec.yml: AWS
  template.yaml: AWS
  cdk/: AWS 

  dvc.yaml: DVC  
  dvc.lock: DVC  
  metrics.yaml: DVC  
  .dvc/config: DVC  
  model_registry/: MLFlow  
  mlruns/: MLFlow  
  mlflow.yml: MLFlow  
  mlflow.yaml: MLFlow  
    
  appveyor.yml: AppVeyor
  bamboo-specs/: Bamboo 
  .teamcity/: TeamCity 
  codeship.yml: Codeship  
  codeship.yaml: Codeship  
  codeclimate.yml: CodeClimate  
  argo-cd/: Argo CD
  application.yaml: Argo CD
  openshift-pipelines/: OpenShift
  master.cfg: Buildbot
  go.cd/: GoCD
  cruise-config.xml: GoCD
  semaphore.yml: Semaphore
  semaphore.yaml: Semaphore
  spinnaker.yml: Spinnaker
  spinnaker/: Spinnaker
  harness.yaml: Harness
  deploybot.yaml: DeployBot
  katalon.yaml: Katalon
  webapp.yaml: WebApp
  cfengine/: CFEngine
  rudder/: Rudder
  rundeck/: RunDeck
  juju/: Juju
  pom.xml: Maven
  Dockerfile: Docker
  docker-compose.yml: Docker
  build.xml: Apache ANT
  gruntfile.js: Grunt
  packer.json: Packer
  codemagic.yaml: Codemagic
  buddy.yml: Buddy
  deployhq.yml: DeployHQ


# List of API documentation files to retrieve from the GitHub API when scraping repositories
API_DOC_KEYWORDS:
  - swagger
  - openapi
  - postman
  - api docs
  - rest api
  - documentation
  - endpoints
  - swagger.json
  - openapi.json
  - postman_collection.json
  - api-docs
  - api-spec

# HTTP Session configuration
RETRY_FACTOR: 0.2
RETRY_NUM: 5

# Set default encoding for reading and writing files
DEFAULT_ENCODING: utf-8

# Directories to create and be used
DATA_DIR: data  # Directory for storing scraped data
LOG_DIR: logs  # Directory for storing log files

# File paths for the output of the user and repository scrapers
EGY_USERS_FILENAME:  egy_users.csv                # File path for user data
EGY_USERS_REPOS_FILENAME: egy_users_repos.csv     # File path for repository data of Egyptian users
NON_EGY_REPOS_FILENAME: non_egy_repos.csv         # File path for repository data of non-Egyptian users
EGY_CONTRIBS_FILENAME: egy_contribs.csv           # File path for contributor data
DB_KEYWORDS_FILENAME: database_keywords.json      # File path for database_keywords.json

